class DisjointSet {
public:
    vector<int> size, parent;

    DisjointSet(int n) {
        size.resize(n + 1, 1);
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    int find(int node) {
        if (node == parent[node]) return node;
        return parent[node] = find(parent[node]);
    }

    void unionFind(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        if (pu == pv) {
            return;
        }
        if (size[pu] > size[pv]) {
            size[pu] += size[pv];
            parent[pv] = pu;
        } else {
            size[pv] += size[pu];
            parent[pu] = pv;
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DisjointSet ds(n);
        unordered_set<int> infected(initial.begin(), initial.end());

        // Union the nodes that are not initially infected
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && infected.find(i) == infected.end() && infected.find(j) == infected.end()) {
                    ds.unionFind(i, j);
                }
            }
        }

        unordered_map<int, int> componentSize;
        unordered_map<int, vector<int>> componentToInfectedNodes;

        for (int i = 0; i < n; ++i) {
            int root = ds.find(i);
            componentSize[root] = ds.size[root];
        }

        for (int node : initial) {
            unordered_set<int> componentsInfluenced;
            for (int i = 0; i < n; ++i) {
                if (graph[node][i] == 1 && infected.find(i) == infected.end()) {
                    int root = ds.find(i);
                    componentsInfluenced.insert(root);
                }
            }
            for (int root : componentsInfluenced) {
                componentToInfectedNodes[root].push_back(node);
            }
        }

        int bestNode = -1;
        int maxSaved = -1;

        for (int node : initial) {
            int saved = 0;
            unordered_set<int> uniqueComponents;
            for (int i = 0; i < n; ++i) {
                if (graph[node][i] == 1 && infected.find(i) == infected.end()) {
                    int root = ds.find(i);
                    if (componentToInfectedNodes[root].size() == 1) {
                        if (uniqueComponents.find(root) == uniqueComponents.end()) {
                            uniqueComponents.insert(root);
                            saved += componentSize[root];
                        }
                    }
                }
            }
            if (saved > maxSaved || (saved == maxSaved && node < bestNode)) {
                bestNode = node;
                maxSaved = saved;
            }
        }

        if (bestNode == -1) {
            return *min_element(initial.begin(), initial.end());
        }

        return bestNode;
    }
};