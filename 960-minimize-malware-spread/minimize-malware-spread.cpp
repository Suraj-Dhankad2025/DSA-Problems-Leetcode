class DisjointSet{
    public:
    vector<int>parent, size;
    DisjointSet(int n){
        parent.resize(n+1);
        size.resize(n+1, 1);
        for(int i=0; i<=n; i++){
            parent[i] = i;
        }
    }
    int findUParent(int node){
        if(node==parent[node]){
            return node;
        }
        return parent[node] = findUParent(parent[node]);
    }
    void unionBySize(int u, int v){
        int ulp_u = findUParent(u);
        int ulp_v = findUParent(v);
        if(ulp_u==ulp_v){
            return ;
        }
        if(size[ulp_u]>size[ulp_v]){
            size[ulp_u]+=size[ulp_v];
            parent[ulp_v] = ulp_u;
        }
        else{
            size[ulp_v]+=size[ulp_u];
            parent[ulp_u] = ulp_v;
        }
    }

};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DisjointSet ds(n);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(graph[i][j]==1 && i!=j){
                    ds.unionBySize(i, j);
                }
            }
        }
        map<int, int>m;
        for(auto node:initial){
            int p = ds.findUParent(node);
            m[p]++;
        }
            
        int ans=-1, maxi = INT_MIN, minEle = INT_MAX;
        for(auto node:initial){
            int p = ds.findUParent(node);
            if(m[p]==1 && (ds.size[p]>maxi || (ds.size[p]==maxi && node<ans) )){
                maxi = ds.size[p];
                ans = node;
            }
            minEle = min(minEle, node);
        }
        if(ans == -1){
            return minEle;
        }
        return ans;
    }
};